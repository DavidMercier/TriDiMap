%% Copyright 2014 MERCIER David
function [dataCleaned, ratioNan] = TriDiMap_cleaningData(data)
%% Function to replace NaN values to avoid blank pixels

data(data == 0) = NaN;
[row, col] = find(isnan(data));
ratioNan = 100*length(row)/(size(data,1)*size(data,2));

for ii = 1:length(row)
    if row(ii) > 1 && col(ii) > 1 && ...
            row(ii) < size(data,1) && ...
            col(ii) < size(data,2)
        data(row(ii), col(ii)) = ....
            nanmean([data(row(ii)-1, col(ii)-1), ...
            data(row(ii)-1, col(ii)), ...
            data(row(ii)-1, col(ii)+1), ...
            data(row(ii), col(ii)-1), ...
            data(row(ii), col(ii)+1), ...
            data(row(ii)+1, col(ii)-1), ...
            data(row(ii)+1, col(ii)), ...
            data(row(ii)+1, col(ii)+1)]);
        
    elseif row(ii) == 1
        if col(ii) == 1
            A = [data(row(ii), col(ii)+1), ...
                data(row(ii)+1, col(ii)), ...
                data(row(ii)+1, col(ii)+1)];
            data(row(ii), col(ii)) = ....
                mean(A(~isnan(A)));
            
        elseif col(ii) == size(data,2)
            A = [data(row(ii), col(ii)-1), ...
                data(row(ii)+1, col(ii)), ...
                data(row(ii)+1, col(ii)-1)];
            data(row(ii), col(ii)) = ...
                mean(A(~isnan(A)));
        else
            A = [data(row(ii), col(ii)-1), ...
                data(row(ii), col(ii)+1), ...
                data(row(ii)+1, col(ii)-1), ...
                data(row(ii)+1, col(ii)), ...
                data(row(ii)+1, col(ii)+1)];
            data(row(ii), col(ii)) = ...
                mean(A(~isnan(A)));
        end
        
    elseif row(ii) == size(data,1)
        if col(ii) == 1
            A = [data(row(ii)-1, col(ii)), ...
                data(row(ii)-1, col(ii)+1), ...
                data(row(ii), col(ii)+1)];
            data(row(ii), col(ii)) = ...
                mean(A(~isnan(A)));
            
        elseif col(ii) == size(data,2)
            A = [data(row(ii)-1, col(ii)-1), ...
                data(row(ii)-1, col(ii)), ...
                data(row(ii), col(ii)-1)];
            data(row(ii), col(ii)) = ...
                mean(A(~isnan(A)));
        else
            A = [data(row(ii), col(ii)-1), ...
                data(row(ii), col(ii)+1), ...
                data(row(ii)-1, col(ii)-1), ...
                data(row(ii)-1, col(ii)), ...
                data(row(ii)-1, col(ii)+1)];
            data(row(ii), col(ii)) = ...
                mean(A(~isnan(A)));
        end
        
    elseif col(ii) == 1 && ...
            row(ii) > 1 && row(ii) < size(data,1)
        A = [data(row(ii)-1, col(ii)), ...
            data(row(ii)+1, col(ii)), ...
            data(row(ii)-1, col(ii)+1), ...
            data(row(ii), col(ii)+1), ...
            data(row(ii)+1, col(ii)+1)];
        data(row(ii), col(ii)) = ...
            mean(A(~isnan(A)));
        
    elseif col(ii) == size(data,2) && ...
            row(ii) > 1 && row(ii) < size(data,1)
        A = [data(row(ii)-1, col(ii)), ...
            data(row(ii)+1, col(ii)), ...
            data(row(ii)-1, col(ii)-1), ...
            data(row(ii), col(ii)-1), ...
            data(row(ii)+1, col(ii)-1)];
        data(row(ii), col(ii)) = ...
            mean(A(~isnan(A)));
    end
    
end

dataCleaned = data;

end